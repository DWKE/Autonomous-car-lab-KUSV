// Generated by gencpp from file kusv_msgs/ControlCmd.msg
// DO NOT EDIT!


#ifndef KUSV_MSGS_MESSAGE_CONTROLCMD_H
#define KUSV_MSGS_MESSAGE_CONTROLCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kusv_msgs
{
template <class ContainerAllocator>
struct ControlCmd_
{
  typedef ControlCmd_<ContainerAllocator> Type;

  ControlCmd_()
    : linear_velocity(0.0)
    , steering_angle(0.0)  {
    }
  ControlCmd_(const ContainerAllocator& _alloc)
    : linear_velocity(0.0)
    , steering_angle(0.0)  {
  (void)_alloc;
    }



   typedef double _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef double _steering_angle_type;
  _steering_angle_type steering_angle;





  typedef boost::shared_ptr< ::kusv_msgs::ControlCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kusv_msgs::ControlCmd_<ContainerAllocator> const> ConstPtr;

}; // struct ControlCmd_

typedef ::kusv_msgs::ControlCmd_<std::allocator<void> > ControlCmd;

typedef boost::shared_ptr< ::kusv_msgs::ControlCmd > ControlCmdPtr;
typedef boost::shared_ptr< ::kusv_msgs::ControlCmd const> ControlCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kusv_msgs::ControlCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kusv_msgs::ControlCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace kusv_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'kusv_msgs': ['/home/lke/ACL_KUSV/src/msgs/kusv_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'pcl_msgs': ['/opt/ros/kinetic/share/pcl_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'jsk_footstep_msgs': ['/opt/ros/kinetic/share/jsk_footstep_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'jsk_recognition_msgs': ['/opt/ros/kinetic/share/jsk_recognition_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::kusv_msgs::ControlCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kusv_msgs::ControlCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kusv_msgs::ControlCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kusv_msgs::ControlCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kusv_msgs::ControlCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kusv_msgs::ControlCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kusv_msgs::ControlCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f32152926ab6255084d804f9e199d25";
  }

  static const char* value(const ::kusv_msgs::ControlCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f32152926ab6255ULL;
  static const uint64_t static_value2 = 0x084d804f9e199d25ULL;
};

template<class ContainerAllocator>
struct DataType< ::kusv_msgs::ControlCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kusv_msgs/ControlCmd";
  }

  static const char* value(const ::kusv_msgs::ControlCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kusv_msgs::ControlCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 linear_velocity\n\
float64 steering_angle\n\
";
  }

  static const char* value(const ::kusv_msgs::ControlCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kusv_msgs::ControlCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linear_velocity);
      stream.next(m.steering_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kusv_msgs::ControlCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kusv_msgs::ControlCmd_<ContainerAllocator>& v)
  {
    s << indent << "linear_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.steering_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUSV_MSGS_MESSAGE_CONTROLCMD_H
